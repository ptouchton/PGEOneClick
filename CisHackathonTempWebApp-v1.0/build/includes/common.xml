<project name="common" >

	<!-- ================================================================== -->
	<!--  TARGET: getSrc                                               -->
	<!-- ================================================================== -->
	<target name="getSrc" depends="init,_getComponentsList">
		<if>
			<isset property="component.list" />
		<then>	
			<echo message="BEGIN checking out src..." />	
			<foreach 	list="${component.list}"
						delimiter=","
						target="_checkoutComponent"
						param="component.name" />
			<echo message="DONE checking out src." />
			<delete dir="${src.dir}" />
			<echo message="Copying svn directory to source directory..." />
			<delete dir="${src.dir}" />
			<mkdir dir="${src.dir}" />
			<defaultexcludes add="**/_svn"/>
			<defaultexcludes add="**/_svn/**"/>
			<copy todir="${src.dir}">
				<fileset dir="${svn.dir}" defaultexcludes="yes" />
			</copy>
		</then>
		<else>
			<fail message="There are no components defined to checkout!"/>			
		</else>
		</if>
	</target>
		
	<target name="normalizePath" depends="init,_getComponentsList">
		<echo message="Normalizing Paths in .classfiles (unix specific) in ${src.dir}" />
		<if>
			<os family="unix"/>
		<then>
			 <exec executable="/bin/bash" dir="${src.dir}">
				<arg value="-c"/>
				<arg value="for x in `find . -name '.classpath'`; do sed -i 's/C://' $x; done"/>
			</exec>	
			<exec executable="/bin/bash" dir="${src.dir}">
				<arg value="-c"/>
				<arg value="for x in `find . -name '.classpath'`; do sed -i '/websphere_default_messaging_provider/d' $x; done"/>
			</exec>			
		</then>
		</if>
	</target>
	
	<target name="_getComponentsList">
		<!-- Get list of components from file that does not always come in the right order -->
		<propertyselector property="component.list" delimiter=","
				  match="component\+([^\+]*)\+svn"
				  select="\0"
				  casesensitive="false"
				  override="true" />
		<!-- Make sure the list we have is sorted as they are in the file -->
		<sortlist property="component.list" override="true" value="${component.list}" orderPropertyFile="${basedir}/buildConfig.properties" />
		<!-- Strip off the component and svn parts around each component -->
		<propertyregex property="clean_component.list" input="${component.list}"
				regexp="(component\+)([^\+]*)(\+svn)"
				replace="\2"
				global="true" />

		<var name="mut_component.list" value="${clean_component.list}"/>
		<!-- Add junit components to the list if we are doing non createCI build -->
		<property name="junit.list" value="" />
		<propertyselector property="junit.list" delimiter=","
				  match="junit\.([^\.]*)\.path"
				  select="\1"
				  casesensitive="false"
				  override="true" />

   		<if>
			<and>
				<length string="${junit.list}" when="greater" length="0" />
				<not>
					<equals arg1="${workspace.type}" arg2="createCI" casesensitive="false" />
				</not>
			</and>
			<then>
				<echo message="appending junit" />
      				<var name="mut_component.list" value="${mut_component.list},${junit.list}"/>
			</then>
		</if>			
		<echo message="${mut_component.list}" />
	</target>


	
	<target name="_getJunitList">
	
			<echo message="**** Junit Tests" />
			<property name="junit.list" value="" />
			<propertyselector property="junit.list" delimiter=","
							  	match="junit\.([^\.]*)\.path"
								select="\1"
								casesensitive="false"
								override="true" />
	</target>



	<!-- ================================================================== -->
	<!--  TARGET: getJars                                              -->
	<!-- ================================================================== -->
	<target name="getJars" depends="init,_getJarList">
		<if>
			<isset property="dependency.jar.list" />
		<then>
			<echo message="BEGIN getting jars..." />			
			<foreach 	list="${dependency.jar.list}"
						delimiter=","
						target="_getJar"
						param="jar" />
			<echo message="DONE getting." />
		</then>
		<else>
			<echo message="There are no dependency jars to get." />
		</else>
		</if>				
	</target>
			
	<target name="_getJar">
		<propertycopy name="url" from="dependency.jar.${jar}.url" />
		
		<!--  extact the file name from the url  -->
		<propertyregex  property="jar.name"
						input="${url}"
						regexp="http://.+/(.+\.jar)"
						select="\1"
						casesensitive="false"
						override="true"
		/>
		
		<echo message="Getting ${jar.name}" />
		<if>
			<os family="unix"/>
		<then>
		
		</then>
		<else>
			<get src="${url}" dest="${lib.dir}/${jar.name}" />
		
		</else>
		</if>
	</target>
	
	<target name="_getJarList" >
		<propertyselector 	property="dependency.jar.list" delimiter=","
						  	match="dependency.jar\.([^\.]*)\.url"
							select="\1"
							casesensitive="false"
							override="true"
		/>
	</target>

	<!-- ================================================================== -->
	<!-- TARGET: createEAR                                                  -->                                
	<!-- ================================================================== -->
	<target name="createEAR">
		<!--
			We cannot use the default ant <ear> task because specific code needs
			to be generated and also nothing has been compiled at this point.

			The reason that there is a conditional here is because if the app
			contains an SCA Module the EAR must be initially built using the
			deploysca.bat script. Otherwise the EAR is generated using the 
			headless method.
		-->
		<if>
			<and>
				<isset property="deployable.scaModule" />
				<equals arg1="${deployable.scaModule}" arg2="true" casesensitive="false" />
			</and>
		<then>
	 		<antcall target="serviceDeploy" inheritAll="true" />
		</then>
		<else>
			<antcall target="headlessEARExport" inheritAll="true" />
		</else>
		</if>
	</target>

	<!-- ================================================================== -->
	<!--  TARGET: serviceDeploy                                             -->
	<!-- ================================================================== -->
	<target name="serviceDeploy">
		<ant antfile="${includes.dir}/sca_build.xml" inheritAll="true" />
	</target>
	
	
	
	
	<!-- ================================================================== -->
	<!--  TARGET: headlessEARExport                                         -->
	<!-- ================================================================== -->
	<target name="headlessEARExport" >
	
	
	    <if>
		<os family="unix"/>
			<then>
			   <echo message="${mut_component.list}" />
				<java 	classname="org.eclipse.core.launcher.Main"
				classpath="/IBM/WID7/plugins/org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar" 
				fork="true"		
				failonerror="true"
				>
						<jvmarg value="-Dcomponent.list=${mut_component.list}"/>
						<jvmarg value="-Dear.projectname=${application.name}"/>
						<jvmarg value="-Dear.location=${export.dir}/"/>

					<arg line="-application com.ibm.wbit.comptest.ant.RunAntWid -data ${svn.dir} -buildfile ${includes.dir}/headless_build.xml -os linux -ws gtk exportEAR " />
				</java>	
			</then>
			<else>
				<java 	classname="org.eclipse.core.launcher.Main"
				classpath="C:\IBM\WID7\plugins\org.eclipse.equinox.launcher_1.0.101.R34x_v20081125.jar" 
				fork="true"		
				failonerror="true"
				>
						<jvmarg value="-Dcomponent.list=${mut_component.list}"/>
						<jvmarg value="-Dear.projectname=${application.name}"/>
						<jvmarg value="-Dear.location=${export.dir}/"/>
					<arg line="-application com.ibm.wbit.comptest.ant.RunAntWid -data ${svn.dir} -buildfile ${includes.dir}/headless_build.xml exportEAR" />
				</java>
			</else>
		</if>	
	</target>

	
	<!-- ================================================================== -->
	<!--  TARGET: generateCode                                              -->
	<!-- ================================================================== -->
	<target name="generateCode">
		<antcall target="_generateWS" inheritAll="true"/>
	</target>	
	
	<target name="_generateWS">
		<!--  check to see if the WS flag is set -->
		<echo message="Checking for Web Servcies..." />
		<if>
			<and>
				<isset property="deployable.webService" />
				<equals arg1="${deployable.webService}" arg2="true" casesensitive="false" />
			</and>
			<then>
				<echo message="BEGIN Prepping Web Services.." />
				<antcall target="_wsDeploy" inheritAll="true" />
			</then>
			<else>
				<echo message="No Web Services to prep" />
			</else>
		</if>	
	</target>
	 
	 <target name="_wsDeploy">
	 	<echo message="Generating ws code for ${application.name}" />
	 	<exec dir="${basedir}" executable="${ws.deploy}" output="${log.dir}\${application.name}_wsDeploy.log" failonerror="true" resultproperty="wsdeploy.rc" >
	 		<arg line=" ${export.dir}/${application.name}.ear  ${export.dir}/${application.name}.ear" />
	 	</exec>
		<if>
			<and>
				<equals arg1="${wsdeploy.rc}" arg2="0" />
				<available file="${application.name}.ear" filepath="${export.dir}"/>
			</and>
		       <then>
				<echo message="${application.name}.ear code was generated without error" />
				<echo message="${application.name}.ear code was generate without error ${line.separator}" file="${log.dir}\results.log" append="true" />
		       </then>
		       <else>
			      	<echo message="${application.name}.ear had a problem during EJB code generation, refer to ${log.dir}\${application.name}_wsDeploy.log for details of the problem " />
			     	<echo message="${application.name}.ear had a problem during EJB code generation, refer to ${log.dir}\${application.name}_wsDeploy.log for details of the problem ${line.separator}" file="${log.dir}\results.log" append="true" />
		       </else>
		</if>
	 </target>
</project>
