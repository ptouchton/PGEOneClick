package com.pgn.v1.cis.dao;

import java.sql.CallableStatement;

import javax.sql.DataSource;

import com.pgn._2010._07.fault.xsd.ServiceFault;
import com.pgn.utils.dataaccess.PGEDataAccess;

public class CisHackathonTempDao {

	protected static final String INSERT_ONE_CLICK = "{?=call OL_PAYMENT_PKG.InsertOneClick(?,?,?,?,?,?)}";
	protected static final int INSERT_ONE_CLICK_RESULT_OUT 					= 1;
	protected static final int INSERT_ONE_CLICK_CUST_CODE_IN 				= 2;
	protected static final int INSERT_ONE_CLICK_PREM_CODE_IN 				= 3;
	protected static final int INSERT_ONE_CLICK_PAYMENT_AMOUNT_IN 				= 3;
	protected static final int INSERT_ONE_CLICK_PAYMENT_DATE_IN 				= 3;
	protected static final int INSERT_ONE_CLICK_ERROR_CODE_OUT 				= 4;
	protected static final int INSERT_ONE_CLICK_ERROR_MSG_OUT 				= 5;
	
	private static final String SERVICE_FAULT = ServiceFault.class.getSimpleName();
	
	private PGEDataAccess cisDataAccess = null;
	private CallableStatement callable = null;
	
	public CisHackathonTempDao(DataSource cisDataSource) {
		cisDataAccess = new PGEDataAccess(cisDataSource);	
	}

	//Used for testing, so that the dataAccess can be mocked
	protected CisHackathonTempDao(PGEDataAccess dataAccess) {
		cisDataAccess = dataAccess;
	}
	
	public ServiceResponse cancelLoans(AccountNumber accountNumber) throws CancelLoansServiceFaultMsg 
	{
		if (accountNumber == null){
			String errorMessage = "AccountNumber must be supplied.";
			logger.error(errorMessage);
			ServiceFault fault = new ServiceFault();
			fault.setReason(errorMessage);
			throw new CancelLoansServiceFaultMsg(SERVICE_FAULT, fault);
		} else if (accountNumber.getCustomerCode() == 0) {
			String errorMessage = "The CustomerCode property of the Account number must contain a valid value.";
			logger.error(errorMessage);
			ServiceFault fault = new ServiceFault();
			fault.setReason(errorMessage);
			throw new CancelLoansServiceFaultMsg(SERVICE_FAULT, fault);
		}else if (accountNumber.getPremiseCode() == null || accountNumber.getPremiseCode().trim() == "") {
			String errorMessage = "The PremiseCode property of the Account number must contain a valid value.";
			logger.error(errorMessage);
			ServiceFault fault = new ServiceFault();
			fault.setReason(errorMessage);
			throw new CancelLoansServiceFaultMsg(SERVICE_FAULT, fault);
		}
		
		ServiceResponse response = new ServiceResponse();
		
		try{
			boolean retryable = true;
			while (retryable) {
				try {
					callable = cisDataAccess.getStatement(INSERT_ONE_CLICK);
					callable.registerOutParameter(INSERT_ONE_CLICK_RESULT_OUT,Types.NUMERIC);
					callable.setInt(INSERT_ONE_CLICK_CUST_CODE_IN, accountNumber.getCustomerCode());
					callable.setString(INSERT_ONE_CLICK_PREM_CODE_IN, accountNumber.getPremiseCode());              
					callable.registerOutParameter(INSERT_ONE_CLICK_ERROR_CODE_OUT, Types.VARCHAR);
					callable.registerOutParameter(INSERT_ONE_CLICK_ERROR_MSG_OUT, Types.VARCHAR);               

					cisDataAccess.executeQuery(INSERT_ONE_CLICK_ERROR_MSG_OUT, false);    
					retryable = false;
				} 
				catch (SQLException e) {
					retryable = cisDataAccess.isRetryable(e);
					if (!retryable) {
						throw new DataAccessException(e);
					}
				}
			}
			
			int result=callable.getInt(INSERT_ONE_CLICK_RESULT_OUT);
			// Expecting: 0 = success
			//			  -1 = failure
			if(result == 0) {
				response.setResult(true);
				logger.info("A sucessful response was returned from the PL_Move_Service_PKG.CancelLoans call for: " + accountNumber.getCustomerCode() + "-" + accountNumber.getPremiseCode() + ". Success message: " + callable.getString(INSERT_ONE_CLICK_ERROR_MSG_OUT));
			}else{ 
				response.setResult(false);
				response.setFailureCode(callable.getString(INSERT_ONE_CLICK_ERROR_CODE_OUT));
				response.setFailureDescription(callable.getString(INSERT_ONE_CLICK_ERROR_MSG_OUT));
			}
		}catch (Exception e) {
			String errorMessage = "An Exception was caught when executing PL_Move_Service_PKG.CancelLoans call for: " + accountNumber.getCustomerCode() + "-" + accountNumber.getPremiseCode() + ". Error message: " + e.getMessage();
			logger.error(errorMessage);
			throw new DataAccessException(errorMessage);
		} finally {
			cisDataAccess.closeResources();
		}
		
		return response;
    }
	
	
}
